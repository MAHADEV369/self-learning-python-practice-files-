import numpy as np 

def sigmoidfunction(x):
    return 1/ (1+ np.exp(-x))

def neuralnetworkForward(inputs, weights, bias):
    activations = []
    for i in range(len(weights)):
        if i == 0:
            input_data = inputs
        else:
            input_data = activation[-1]
        z = np.dot(input_data, weights[i]) + bias[i]
        activation = sigmoidfunction(z)
        activations.append(activation)
    return activations

inputs = np.array([1, 0.5, -0.5])  #input
weights = [np.array([[0.1, 0.2, 0.3], [0.2, 0.3, -0.1]]), np.array([0.5, -0.4])]  #weights
bias = [np.array([0.1, -0.1]), np.array([-0.2])]  #biases
activations = neu(inputs, weights, bias)
print("Activations after each layer", activations)



##ValueError: shapes (3,) and (2,3) not aligned: 3 (dim 0) != 2 (dim 0)
